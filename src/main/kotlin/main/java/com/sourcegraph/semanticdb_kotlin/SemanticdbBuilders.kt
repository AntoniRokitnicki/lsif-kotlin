// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
@file:JvmName("-SemanticdbBuilders")

package com.sourcegraph.semanticdb_kotlin

import kotlin.DslMarker
import kotlin.Unit
import kotlin.annotation.AnnotationRetention
import kotlin.annotation.AnnotationTarget
import kotlin.annotation.Retention
import kotlin.annotation.Target
import kotlin.jvm.JvmName

inline fun Semanticdb.TextDocuments.copy(block: Semanticdb.TextDocuments.Builder.() -> Unit):
        Semanticdb.TextDocuments = this.toBuilder().apply(block).build()

operator fun Semanticdb.TextDocuments.plus(other: Semanticdb.TextDocuments):
        Semanticdb.TextDocuments = this.toBuilder().mergeFrom(other).build()

fun Semanticdb.TextDocuments?.orDefault(): Semanticdb.TextDocuments = this ?:
        Semanticdb.TextDocuments.getDefaultInstance()

inline fun Semanticdb.TextDocuments.Builder.addDocuments(block:
        Semanticdb.TextDocument.Builder.() -> Unit): Semanticdb.TextDocuments.Builder =
        this.addDocuments(Semanticdb.TextDocument.newBuilder().apply(block).build())

inline fun Semanticdb.TextDocument.copy(block: Semanticdb.TextDocument.Builder.() -> Unit):
        Semanticdb.TextDocument = this.toBuilder().apply(block).build()

operator fun Semanticdb.TextDocument.plus(other: Semanticdb.TextDocument): Semanticdb.TextDocument =
        this.toBuilder().mergeFrom(other).build()

fun Semanticdb.TextDocument?.orDefault(): Semanticdb.TextDocument = this ?:
        Semanticdb.TextDocument.getDefaultInstance()

inline fun Semanticdb.TextDocument.Builder.addSymbols(block:
        Semanticdb.SymbolInformation.Builder.() -> Unit): Semanticdb.TextDocument.Builder =
        this.addSymbols(Semanticdb.SymbolInformation.newBuilder().apply(block).build())

inline fun Semanticdb.TextDocument.Builder.addOccurrences(block:
        Semanticdb.SymbolOccurrence.Builder.() -> Unit): Semanticdb.TextDocument.Builder =
        this.addOccurrences(Semanticdb.SymbolOccurrence.newBuilder().apply(block).build())

inline fun Semanticdb.Range.copy(block: Semanticdb.Range.Builder.() -> Unit): Semanticdb.Range =
        this.toBuilder().apply(block).build()

operator fun Semanticdb.Range.plus(other: Semanticdb.Range): Semanticdb.Range =
        this.toBuilder().mergeFrom(other).build()

fun Semanticdb.Range?.orDefault(): Semanticdb.Range = this ?: Semanticdb.Range.getDefaultInstance()

inline fun Semanticdb.Signature.copy(block: Semanticdb.Signature.Builder.() -> Unit):
        Semanticdb.Signature = this.toBuilder().apply(block).build()

operator fun Semanticdb.Signature.plus(other: Semanticdb.Signature): Semanticdb.Signature =
        this.toBuilder().mergeFrom(other).build()

fun Semanticdb.Signature?.orDefault(): Semanticdb.Signature = this ?:
        Semanticdb.Signature.getDefaultInstance()

inline fun Semanticdb.Signature.Builder.classSignature(block:
        Semanticdb.ClassSignature.Builder.() -> Unit): Semanticdb.Signature.Builder =
        this.setClassSignature(Semanticdb.ClassSignature.newBuilder().apply(block).build())

inline fun Semanticdb.Signature.Builder.methodSignature(block:
        Semanticdb.MethodSignature.Builder.() -> Unit): Semanticdb.Signature.Builder =
        this.setMethodSignature(Semanticdb.MethodSignature.newBuilder().apply(block).build())

inline fun Semanticdb.Signature.Builder.typeSignature(block: Semanticdb.TypeSignature.Builder.() ->
        Unit): Semanticdb.Signature.Builder =
        this.setTypeSignature(Semanticdb.TypeSignature.newBuilder().apply(block).build())

inline fun Semanticdb.Signature.Builder.valueSignature(block:
        Semanticdb.ValueSignature.Builder.() -> Unit): Semanticdb.Signature.Builder =
        this.setValueSignature(Semanticdb.ValueSignature.newBuilder().apply(block).build())

inline fun Semanticdb.ClassSignature.copy(block: Semanticdb.ClassSignature.Builder.() -> Unit):
        Semanticdb.ClassSignature = this.toBuilder().apply(block).build()

operator fun Semanticdb.ClassSignature.plus(other: Semanticdb.ClassSignature):
        Semanticdb.ClassSignature = this.toBuilder().mergeFrom(other).build()

fun Semanticdb.ClassSignature?.orDefault(): Semanticdb.ClassSignature = this ?:
        Semanticdb.ClassSignature.getDefaultInstance()

inline fun Semanticdb.ClassSignature.Builder.typeParameters(block: Semanticdb.Scope.Builder.() ->
        Unit): Semanticdb.ClassSignature.Builder =
        this.setTypeParameters(Semanticdb.Scope.newBuilder().apply(block).build())

inline fun Semanticdb.ClassSignature.Builder.addParents(block: Semanticdb.Type.Builder.() -> Unit):
        Semanticdb.ClassSignature.Builder =
        this.addParents(Semanticdb.Type.newBuilder().apply(block).build())

inline fun Semanticdb.ClassSignature.Builder.declarations(block: Semanticdb.Scope.Builder.() ->
        Unit): Semanticdb.ClassSignature.Builder =
        this.setDeclarations(Semanticdb.Scope.newBuilder().apply(block).build())

inline fun Semanticdb.MethodSignature.copy(block: Semanticdb.MethodSignature.Builder.() -> Unit):
        Semanticdb.MethodSignature = this.toBuilder().apply(block).build()

operator fun Semanticdb.MethodSignature.plus(other: Semanticdb.MethodSignature):
        Semanticdb.MethodSignature = this.toBuilder().mergeFrom(other).build()

fun Semanticdb.MethodSignature?.orDefault(): Semanticdb.MethodSignature = this ?:
        Semanticdb.MethodSignature.getDefaultInstance()

inline fun Semanticdb.MethodSignature.Builder.typeParameters(block: Semanticdb.Scope.Builder.() ->
        Unit): Semanticdb.MethodSignature.Builder =
        this.setTypeParameters(Semanticdb.Scope.newBuilder().apply(block).build())

inline fun Semanticdb.MethodSignature.Builder.addParameterLists(block:
        Semanticdb.Scope.Builder.() -> Unit): Semanticdb.MethodSignature.Builder =
        this.addParameterLists(Semanticdb.Scope.newBuilder().apply(block).build())

inline fun Semanticdb.MethodSignature.Builder.returnType(block: Semanticdb.Type.Builder.() -> Unit):
        Semanticdb.MethodSignature.Builder =
        this.setReturnType(Semanticdb.Type.newBuilder().apply(block).build())

inline fun Semanticdb.TypeSignature.copy(block: Semanticdb.TypeSignature.Builder.() -> Unit):
        Semanticdb.TypeSignature = this.toBuilder().apply(block).build()

operator fun Semanticdb.TypeSignature.plus(other: Semanticdb.TypeSignature):
        Semanticdb.TypeSignature = this.toBuilder().mergeFrom(other).build()

fun Semanticdb.TypeSignature?.orDefault(): Semanticdb.TypeSignature = this ?:
        Semanticdb.TypeSignature.getDefaultInstance()

inline fun Semanticdb.TypeSignature.Builder.typeParameters(block: Semanticdb.Scope.Builder.() ->
        Unit): Semanticdb.TypeSignature.Builder =
        this.setTypeParameters(Semanticdb.Scope.newBuilder().apply(block).build())

inline fun Semanticdb.TypeSignature.Builder.lowerBound(block: Semanticdb.Type.Builder.() -> Unit):
        Semanticdb.TypeSignature.Builder =
        this.setLowerBound(Semanticdb.Type.newBuilder().apply(block).build())

inline fun Semanticdb.TypeSignature.Builder.upperBound(block: Semanticdb.Type.Builder.() -> Unit):
        Semanticdb.TypeSignature.Builder =
        this.setUpperBound(Semanticdb.Type.newBuilder().apply(block).build())

inline fun Semanticdb.ValueSignature.copy(block: Semanticdb.ValueSignature.Builder.() -> Unit):
        Semanticdb.ValueSignature = this.toBuilder().apply(block).build()

operator fun Semanticdb.ValueSignature.plus(other: Semanticdb.ValueSignature):
        Semanticdb.ValueSignature = this.toBuilder().mergeFrom(other).build()

fun Semanticdb.ValueSignature?.orDefault(): Semanticdb.ValueSignature = this ?:
        Semanticdb.ValueSignature.getDefaultInstance()

inline fun Semanticdb.ValueSignature.Builder.tpe(block: Semanticdb.Type.Builder.() -> Unit):
        Semanticdb.ValueSignature.Builder =
        this.setTpe(Semanticdb.Type.newBuilder().apply(block).build())

inline fun Semanticdb.SymbolInformation.copy(block: Semanticdb.SymbolInformation.Builder.() ->
        Unit): Semanticdb.SymbolInformation = this.toBuilder().apply(block).build()

operator fun Semanticdb.SymbolInformation.plus(other: Semanticdb.SymbolInformation):
        Semanticdb.SymbolInformation = this.toBuilder().mergeFrom(other).build()

fun Semanticdb.SymbolInformation?.orDefault(): Semanticdb.SymbolInformation = this ?:
        Semanticdb.SymbolInformation.getDefaultInstance()

inline fun Semanticdb.SymbolInformation.Builder.signature(block: Semanticdb.Signature.Builder.() ->
        Unit): Semanticdb.SymbolInformation.Builder =
        this.setSignature(Semanticdb.Signature.newBuilder().apply(block).build())

inline fun Semanticdb.SymbolInformation.Builder.access(block: Semanticdb.Access.Builder.() -> Unit):
        Semanticdb.SymbolInformation.Builder =
        this.setAccess(Semanticdb.Access.newBuilder().apply(block).build())

inline fun Semanticdb.SymbolInformation.Builder.documentation(block:
        Semanticdb.Documentation.Builder.() -> Unit): Semanticdb.SymbolInformation.Builder =
        this.setDocumentation(Semanticdb.Documentation.newBuilder().apply(block).build())

inline fun Semanticdb.Access.copy(block: Semanticdb.Access.Builder.() -> Unit): Semanticdb.Access =
        this.toBuilder().apply(block).build()

operator fun Semanticdb.Access.plus(other: Semanticdb.Access): Semanticdb.Access =
        this.toBuilder().mergeFrom(other).build()

fun Semanticdb.Access?.orDefault(): Semanticdb.Access = this ?:
        Semanticdb.Access.getDefaultInstance()

inline fun Semanticdb.Access.Builder.privateAccess(block: Semanticdb.PrivateAccess.Builder.() ->
        Unit): Semanticdb.Access.Builder =
        this.setPrivateAccess(Semanticdb.PrivateAccess.newBuilder().apply(block).build())

inline fun Semanticdb.Access.Builder.privateWithinAccess(block:
        Semanticdb.PrivateWithinAccess.Builder.() -> Unit): Semanticdb.Access.Builder =
        this.setPrivateWithinAccess(Semanticdb.PrivateWithinAccess.newBuilder().apply(block).build())

inline fun Semanticdb.Access.Builder.protectedAccess(block: Semanticdb.ProtectedAccess.Builder.() ->
        Unit): Semanticdb.Access.Builder =
        this.setProtectedAccess(Semanticdb.ProtectedAccess.newBuilder().apply(block).build())

inline fun Semanticdb.Access.Builder.publicAccess(block: Semanticdb.PublicAccess.Builder.() ->
        Unit): Semanticdb.Access.Builder =
        this.setPublicAccess(Semanticdb.PublicAccess.newBuilder().apply(block).build())

inline fun Semanticdb.PrivateAccess.copy(block: Semanticdb.PrivateAccess.Builder.() -> Unit):
        Semanticdb.PrivateAccess = this.toBuilder().apply(block).build()

operator fun Semanticdb.PrivateAccess.plus(other: Semanticdb.PrivateAccess):
        Semanticdb.PrivateAccess = this.toBuilder().mergeFrom(other).build()

fun Semanticdb.PrivateAccess?.orDefault(): Semanticdb.PrivateAccess = this ?:
        Semanticdb.PrivateAccess.getDefaultInstance()

inline fun Semanticdb.PrivateWithinAccess.copy(block: Semanticdb.PrivateWithinAccess.Builder.() ->
        Unit): Semanticdb.PrivateWithinAccess = this.toBuilder().apply(block).build()

operator fun Semanticdb.PrivateWithinAccess.plus(other: Semanticdb.PrivateWithinAccess):
        Semanticdb.PrivateWithinAccess = this.toBuilder().mergeFrom(other).build()

fun Semanticdb.PrivateWithinAccess?.orDefault(): Semanticdb.PrivateWithinAccess = this ?:
        Semanticdb.PrivateWithinAccess.getDefaultInstance()

inline fun Semanticdb.ProtectedAccess.copy(block: Semanticdb.ProtectedAccess.Builder.() -> Unit):
        Semanticdb.ProtectedAccess = this.toBuilder().apply(block).build()

operator fun Semanticdb.ProtectedAccess.plus(other: Semanticdb.ProtectedAccess):
        Semanticdb.ProtectedAccess = this.toBuilder().mergeFrom(other).build()

fun Semanticdb.ProtectedAccess?.orDefault(): Semanticdb.ProtectedAccess = this ?:
        Semanticdb.ProtectedAccess.getDefaultInstance()

inline fun Semanticdb.PublicAccess.copy(block: Semanticdb.PublicAccess.Builder.() -> Unit):
        Semanticdb.PublicAccess = this.toBuilder().apply(block).build()

operator fun Semanticdb.PublicAccess.plus(other: Semanticdb.PublicAccess): Semanticdb.PublicAccess =
        this.toBuilder().mergeFrom(other).build()

fun Semanticdb.PublicAccess?.orDefault(): Semanticdb.PublicAccess = this ?:
        Semanticdb.PublicAccess.getDefaultInstance()

inline fun Semanticdb.Documentation.copy(block: Semanticdb.Documentation.Builder.() -> Unit):
        Semanticdb.Documentation = this.toBuilder().apply(block).build()

operator fun Semanticdb.Documentation.plus(other: Semanticdb.Documentation):
        Semanticdb.Documentation = this.toBuilder().mergeFrom(other).build()

fun Semanticdb.Documentation?.orDefault(): Semanticdb.Documentation = this ?:
        Semanticdb.Documentation.getDefaultInstance()

inline fun Semanticdb.SymbolOccurrence.copy(block: Semanticdb.SymbolOccurrence.Builder.() -> Unit):
        Semanticdb.SymbolOccurrence = this.toBuilder().apply(block).build()

operator fun Semanticdb.SymbolOccurrence.plus(other: Semanticdb.SymbolOccurrence):
        Semanticdb.SymbolOccurrence = this.toBuilder().mergeFrom(other).build()

fun Semanticdb.SymbolOccurrence?.orDefault(): Semanticdb.SymbolOccurrence = this ?:
        Semanticdb.SymbolOccurrence.getDefaultInstance()

inline fun Semanticdb.SymbolOccurrence.Builder.range(block: Semanticdb.Range.Builder.() -> Unit):
        Semanticdb.SymbolOccurrence.Builder =
        this.setRange(Semanticdb.Range.newBuilder().apply(block).build())

inline fun Semanticdb.Scope.copy(block: Semanticdb.Scope.Builder.() -> Unit): Semanticdb.Scope =
        this.toBuilder().apply(block).build()

operator fun Semanticdb.Scope.plus(other: Semanticdb.Scope): Semanticdb.Scope =
        this.toBuilder().mergeFrom(other).build()

fun Semanticdb.Scope?.orDefault(): Semanticdb.Scope = this ?: Semanticdb.Scope.getDefaultInstance()

inline fun Semanticdb.Scope.Builder.addHardlinks(block: Semanticdb.SymbolInformation.Builder.() ->
        Unit): Semanticdb.Scope.Builder =
        this.addHardlinks(Semanticdb.SymbolInformation.newBuilder().apply(block).build())

inline fun Semanticdb.Type.copy(block: Semanticdb.Type.Builder.() -> Unit): Semanticdb.Type =
        this.toBuilder().apply(block).build()

operator fun Semanticdb.Type.plus(other: Semanticdb.Type): Semanticdb.Type =
        this.toBuilder().mergeFrom(other).build()

fun Semanticdb.Type?.orDefault(): Semanticdb.Type = this ?: Semanticdb.Type.getDefaultInstance()

inline fun Semanticdb.Type.Builder.typeRef(block: Semanticdb.TypeRef.Builder.() -> Unit):
        Semanticdb.Type.Builder =
        this.setTypeRef(Semanticdb.TypeRef.newBuilder().apply(block).build())

inline fun Semanticdb.Type.Builder.existentialType(block: Semanticdb.ExistentialType.Builder.() ->
        Unit): Semanticdb.Type.Builder =
        this.setExistentialType(Semanticdb.ExistentialType.newBuilder().apply(block).build())

inline fun Semanticdb.Type.Builder.intersectionType(block: Semanticdb.IntersectionType.Builder.() ->
        Unit): Semanticdb.Type.Builder =
        this.setIntersectionType(Semanticdb.IntersectionType.newBuilder().apply(block).build())

inline fun Semanticdb.TypeRef.copy(block: Semanticdb.TypeRef.Builder.() -> Unit): Semanticdb.TypeRef
        = this.toBuilder().apply(block).build()

operator fun Semanticdb.TypeRef.plus(other: Semanticdb.TypeRef): Semanticdb.TypeRef =
        this.toBuilder().mergeFrom(other).build()

fun Semanticdb.TypeRef?.orDefault(): Semanticdb.TypeRef = this ?:
        Semanticdb.TypeRef.getDefaultInstance()

inline fun Semanticdb.TypeRef.Builder.addTypeArguments(block: Semanticdb.Type.Builder.() -> Unit):
        Semanticdb.TypeRef.Builder =
        this.addTypeArguments(Semanticdb.Type.newBuilder().apply(block).build())

inline fun Semanticdb.IntersectionType.copy(block: Semanticdb.IntersectionType.Builder.() -> Unit):
        Semanticdb.IntersectionType = this.toBuilder().apply(block).build()

operator fun Semanticdb.IntersectionType.plus(other: Semanticdb.IntersectionType):
        Semanticdb.IntersectionType = this.toBuilder().mergeFrom(other).build()

fun Semanticdb.IntersectionType?.orDefault(): Semanticdb.IntersectionType = this ?:
        Semanticdb.IntersectionType.getDefaultInstance()

inline fun Semanticdb.IntersectionType.Builder.addTypes(block: Semanticdb.Type.Builder.() -> Unit):
        Semanticdb.IntersectionType.Builder =
        this.addTypes(Semanticdb.Type.newBuilder().apply(block).build())

inline fun Semanticdb.ExistentialType.copy(block: Semanticdb.ExistentialType.Builder.() -> Unit):
        Semanticdb.ExistentialType = this.toBuilder().apply(block).build()

operator fun Semanticdb.ExistentialType.plus(other: Semanticdb.ExistentialType):
        Semanticdb.ExistentialType = this.toBuilder().mergeFrom(other).build()

fun Semanticdb.ExistentialType?.orDefault(): Semanticdb.ExistentialType = this ?:
        Semanticdb.ExistentialType.getDefaultInstance()

inline fun Semanticdb.ExistentialType.Builder.tpe(block: Semanticdb.Type.Builder.() -> Unit):
        Semanticdb.ExistentialType.Builder =
        this.setTpe(Semanticdb.Type.newBuilder().apply(block).build())

inline fun Semanticdb.ExistentialType.Builder.declarations(block: Semanticdb.Scope.Builder.() ->
        Unit): Semanticdb.ExistentialType.Builder =
        this.setDeclarations(Semanticdb.Scope.newBuilder().apply(block).build())

inline fun TextDocuments(block: Semanticdb.TextDocuments.Builder.() -> Unit):
        Semanticdb.TextDocuments = Semanticdb.TextDocuments.newBuilder().apply(block).build()

inline fun TextDocument(block: Semanticdb.TextDocument.Builder.() -> Unit): Semanticdb.TextDocument
        = Semanticdb.TextDocument.newBuilder().apply(block).build()

inline fun Range(block: Semanticdb.Range.Builder.() -> Unit): Semanticdb.Range =
        Semanticdb.Range.newBuilder().apply(block).build()

inline fun Signature(block: Semanticdb.Signature.Builder.() -> Unit): Semanticdb.Signature =
        Semanticdb.Signature.newBuilder().apply(block).build()

inline fun ClassSignature(block: Semanticdb.ClassSignature.Builder.() -> Unit):
        Semanticdb.ClassSignature = Semanticdb.ClassSignature.newBuilder().apply(block).build()

inline fun MethodSignature(block: Semanticdb.MethodSignature.Builder.() -> Unit):
        Semanticdb.MethodSignature = Semanticdb.MethodSignature.newBuilder().apply(block).build()

inline fun TypeSignature(block: Semanticdb.TypeSignature.Builder.() -> Unit):
        Semanticdb.TypeSignature = Semanticdb.TypeSignature.newBuilder().apply(block).build()

inline fun ValueSignature(block: Semanticdb.ValueSignature.Builder.() -> Unit):
        Semanticdb.ValueSignature = Semanticdb.ValueSignature.newBuilder().apply(block).build()

inline fun SymbolInformation(block: Semanticdb.SymbolInformation.Builder.() -> Unit):
        Semanticdb.SymbolInformation =
        Semanticdb.SymbolInformation.newBuilder().apply(block).build()

inline fun Access(block: Semanticdb.Access.Builder.() -> Unit): Semanticdb.Access =
        Semanticdb.Access.newBuilder().apply(block).build()

inline fun PrivateAccess(block: Semanticdb.PrivateAccess.Builder.() -> Unit):
        Semanticdb.PrivateAccess = Semanticdb.PrivateAccess.newBuilder().apply(block).build()

inline fun PrivateWithinAccess(block: Semanticdb.PrivateWithinAccess.Builder.() -> Unit):
        Semanticdb.PrivateWithinAccess =
        Semanticdb.PrivateWithinAccess.newBuilder().apply(block).build()

inline fun ProtectedAccess(block: Semanticdb.ProtectedAccess.Builder.() -> Unit):
        Semanticdb.ProtectedAccess = Semanticdb.ProtectedAccess.newBuilder().apply(block).build()

inline fun PublicAccess(block: Semanticdb.PublicAccess.Builder.() -> Unit): Semanticdb.PublicAccess
        = Semanticdb.PublicAccess.newBuilder().apply(block).build()

inline fun Documentation(block: Semanticdb.Documentation.Builder.() -> Unit):
        Semanticdb.Documentation = Semanticdb.Documentation.newBuilder().apply(block).build()

inline fun SymbolOccurrence(block: Semanticdb.SymbolOccurrence.Builder.() -> Unit):
        Semanticdb.SymbolOccurrence = Semanticdb.SymbolOccurrence.newBuilder().apply(block).build()

inline fun Scope(block: Semanticdb.Scope.Builder.() -> Unit): Semanticdb.Scope =
        Semanticdb.Scope.newBuilder().apply(block).build()

inline fun Type(block: Semanticdb.Type.Builder.() -> Unit): Semanticdb.Type =
        Semanticdb.Type.newBuilder().apply(block).build()

inline fun TypeRef(block: Semanticdb.TypeRef.Builder.() -> Unit): Semanticdb.TypeRef =
        Semanticdb.TypeRef.newBuilder().apply(block).build()

inline fun IntersectionType(block: Semanticdb.IntersectionType.Builder.() -> Unit):
        Semanticdb.IntersectionType = Semanticdb.IntersectionType.newBuilder().apply(block).build()

inline fun ExistentialType(block: Semanticdb.ExistentialType.Builder.() -> Unit):
        Semanticdb.ExistentialType = Semanticdb.ExistentialType.newBuilder().apply(block).build()

@DslMarker
@Target(AnnotationTarget.CLASS)
@Retention(AnnotationRetention.BINARY)
annotation class SemanticdbDslMarker

@SemanticdbDslMarker
interface SemanticdbDslBuilder
